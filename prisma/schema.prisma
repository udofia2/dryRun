// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ======== ROLES AND PERMISSIONS ENUMS ========

/// System role types for platform-wide roles
enum SYSTEM_ROLE_TYPE {
  admin
  support
  moderator
}

/// Organization role types for team/organization roles
enum ORG_ROLE_TYPE {
  owner
  admin
  manager
  member
}

/// Permission types covering all possible actions
enum PERMISSION_TYPE {
  event_sourcing
  planner
  backoffice
  crm
  event_create
  event_edit
  event_delete
  event_view
  prospect_create
  prospect_edit
  prospect_view
  offer_create
  offer_edit
  offer_send
  offer_view
  contract_create
  contract_edit
  contract_send
  contract_view
  invoice_create
  invoice_edit
  invoice_send
  invoice_view
  collaborator_invite
  collaborator_manage
  role_assign
  permission_grant
}

// ======== SYSTEM ROLES AND PERMISSIONS ========

model SystemRole {
  id          String           @id @default(uuid())
  name        String           @unique
  type        SYSTEM_ROLE_TYPE @unique
  description String?
  is_active   Boolean          @default(true)

  // Relations
  permissions SystemRolePermission[]
  user_roles  UserSystemRole[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model SystemPermission {
  id          String          @id @default(uuid())
  name        String          @unique
  type        PERMISSION_TYPE @unique
  description String?
  resource    String?
  action      String?
  is_active   Boolean         @default(true)

  // Relations
  role_permissions SystemRolePermission[]
  user_permissions UserPermission[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model SystemRolePermission {
  id                   String @id @default(uuid())
  system_role_id       String
  system_permission_id String

  // Relations
  system_role       SystemRole       @relation(fields: [system_role_id], references: [id], onDelete: Cascade)
  system_permission SystemPermission @relation(fields: [system_permission_id], references: [id], onDelete: Cascade)

  granted_at DateTime @default(now())

  @@unique([system_role_id, system_permission_id])
}

// ======== ORGANIZATION ROLES AND PERMISSIONS ========

model Organization {
  id        String    @id @default(uuid())
  name      String    @db.VarChar(255)
  ownerId   String
  owner     User      @relation("UserOwnedOrganizations", fields: [ownerId], references: [id])
  members   Member[] // Optional: many-to-many user access control
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deleted   Boolean   @default(false)
  deletedAt DateTime?

  @@unique([name, ownerId], name: "organization_owner_unique")
}

model Member {
  id             String   @id @default(uuid())
  userId         String
  organizationId String
  role           String   @db.VarChar(50) // optional: "admin", "viewer", etc.
  createdAt      DateTime @default(now())

  user         User         @relation("UserMemberships", fields: [userId], references: [id])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@unique([userId, organizationId], name: "user_org_unique")
}

model OrganizationRole {
  id              String        @id @default(uuid())
  name            String
  type            ORG_ROLE_TYPE
  description     String?
  organization_id String // References User (organization owner)
  is_active       Boolean       @default(true)

  // Relations
  organization Organization                 @relation("OrganizationRoles", fields: [organization_id], references: [id], onDelete: Cascade)
  permissions  OrganizationRolePermission[]
  user_roles   UserOrganizationRole[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([name, organization_id])
}

model OrganizationPermission {
  id              String          @id @default(uuid())
  name            String
  type            PERMISSION_TYPE
  description     String?
  resource        String?
  action          String?
  organization_id String // References User (organization owner)
  is_active       Boolean         @default(true)

  // Relations
  organization     User                         @relation("OrganizationPermissions", fields: [organization_id], references: [id], onDelete: Cascade)
  role_permissions OrganizationRolePermission[]
  user_permissions UserPermission[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([name, organization_id])
}

model OrganizationRolePermission {
  id                String @id @default(uuid())
  org_role_id       String
  org_permission_id String

  // Relations
  org_role       OrganizationRole       @relation(fields: [org_role_id], references: [id], onDelete: Cascade)
  org_permission OrganizationPermission @relation(fields: [org_permission_id], references: [id], onDelete: Cascade)

  granted_at DateTime @default(now())

  @@unique([org_role_id, org_permission_id])
}

// ======== USER ROLES AND COLLABORATIONS ========

model UserSystemRole {
  id             String    @id @default(uuid())
  user_id        String
  system_role_id String
  assigned_by    String
  assigned_at    DateTime  @default(now())
  expires_at     DateTime?
  is_active      Boolean   @default(true)

  // Relations
  user        User       @relation("UserSystemRoles", fields: [user_id], references: [id], onDelete: Cascade)
  system_role SystemRole @relation(fields: [system_role_id], references: [id], onDelete: Cascade)
  assigner    User       @relation("AssignedSystemRoles", fields: [assigned_by], references: [id])

  @@unique([user_id, system_role_id])
}

model Collaboration {
  id              String     @id @default(uuid())
  collaborator_id String
  organization_id String
  email           String
  status          STATUSTYPE @default(pending)
  invited_by      String
  invited_at      DateTime   @default(now())
  accepted_at     DateTime?
  expires_at      DateTime?
  is_active       Boolean    @default(true)

  // Relations
  collaborator User                   @relation("Collaborations", fields: [collaborator_id], references: [id], onDelete: Cascade)
  organization User                   @relation("OrganizationCollaborations", fields: [organization_id], references: [id], onDelete: Cascade)
  inviter      User                   @relation("InvitedCollaborations", fields: [invited_by], references: [id])
  roles        UserOrganizationRole[]

  @@unique([collaborator_id, organization_id])
  @@index([email])
  @@index([organization_id])
}

model UserOrganizationRole {
  id               String    @id @default(uuid())
  collaboration_id String
  org_role_id      String
  assigned_by      String
  assigned_at      DateTime  @default(now())
  expires_at       DateTime?
  is_active        Boolean   @default(true)

  // Relations
  collaboration Collaboration    @relation(fields: [collaboration_id], references: [id], onDelete: Cascade)
  org_role      OrganizationRole @relation(fields: [org_role_id], references: [id], onDelete: Cascade)
  assigner      User             @relation("AssignedOrgRoles", fields: [assigned_by], references: [id])

  @@unique([collaboration_id, org_role_id])
}

model UserPermission {
  id                String    @id @default(uuid())
  user_id           String
  permission_id     String? // system permission
  org_permission_id String? // organization permission
  organization_id   String? // context organization
  granted_by        String
  granted_at        DateTime  @default(now())
  expires_at        DateTime?
  is_active         Boolean   @default(true)

  // Relations
  user           User                    @relation("UserDirectPermissions", fields: [user_id], references: [id], onDelete: Cascade)
  permission     SystemPermission?       @relation(fields: [permission_id], references: [id], onDelete: Cascade)
  org_permission OrganizationPermission? @relation(fields: [org_permission_id], references: [id], onDelete: Cascade)
  organization   User?                   @relation("OrganizationUserPermissions", fields: [organization_id], references: [id], onDelete: Cascade)
  grantor        User                    @relation("GrantedPermissions", fields: [granted_by], references: [id])

  @@index([user_id])
  @@index([organization_id])
}

// ======== USERS AND AUTHENTICATION ========

model User {
  id        String    @id @default(uuid())
  email     String    @unique
  phone     String?   @unique
  firstname String
  lastname  String
  password  String?
  type      USERTYPE?

  provider   PROVIDER?
  providerId String?
  avatar     String?

  city         String?
  state        String?
  booked_dates DateTime[]
  exhibit      EXHIBITTYPE?

  events         Event[]
  prospects      Prospect[]
  offers         Offer[]
  Contract       Contract[]
  invoice        Invoice[]
  entry_passes   EntryPass[]
  attendee       Attendee[]
  user_purchases UserPurchase[]
  transactions   Transaction[]
  notifications  Notification[]

  // System role relations
  system_roles          UserSystemRole[] @relation("UserSystemRoles")
  assigned_system_roles UserSystemRole[] @relation("AssignedSystemRoles")

  // Organization role relations
  ownedOrganizations Organization[] @relation("UserOwnedOrganizations")
  memberships        Member[]       @relation("UserMemberships")

  organization_roles          OrganizationRole[]       @relation("OrganizationRoles")
  organization_permissions    OrganizationPermission[] @relation("OrganizationPermissions")
  collaborations              Collaboration[]          @relation("Collaborations")
  organization_collaborations Collaboration[]          @relation("OrganizationCollaborations")
  invited_collaborations      Collaboration[]          @relation("InvitedCollaborations")
  assigned_org_roles          UserOrganizationRole[]   @relation("AssignedOrgRoles")

  // Permission relations
  direct_permissions            UserPermission[] @relation("UserDirectPermissions")
  organization_user_permissions UserPermission[] @relation("OrganizationUserPermissions")
  granted_permissions           UserPermission[] @relation("GrantedPermissions")

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  deleted_at DateTime?

  deleted Boolean @default(false)

  @@index([email])
}

// ======== CLIENT MANAGEMENT ========

model Client {
  id           String  @id @default(uuid())
  email        String  @unique
  type         String
  name         String
  phone_number String
  address      String?

  prospects Prospect[]
  events    Event[]
  contracts Contract[]
  invoices  Invoice[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([email])
}

model Prospect {
  id     String             @id @default(uuid())
  date   DateTime           @default(now())
  source EVENTSOURCE
  status PROSPECTSTATUSTYPE @default(pending)

  client_email String
  client       Client @relation(fields: [client_email], references: [email])

  event Event?

  vendor_id String
  vendor    User   @relation(fields: [vendor_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id])
}

// ======== EVENT MANAGEMENT ========

model Event {
  id   String    @id @default(uuid())
  name String    @default("undecided")
  date DateTime?
  type String?

  link       String?
  event_link String?
  token      String?
  status     String?

  number_of_guests Int?

  description          String?
  city                 String?
  state                String?
  location_type        String
  location             String?
  virtual_meeting_link String?
  location_address     String  @default("undecided")

  // Event Schedule Info
  schedule_type       SCHEDULETYPE?
  start_date          DateTime?
  start_time          String?
  end_date            DateTime?
  end_time            String?
  recurring_frequency String?

  // Event owner social links
  facebook_link  String?
  instagram_link String?
  x_link         String?
  website_link   String?
  cover_art_url  String?

  vendor_id String?
  vendor    User?   @relation(fields: [vendor_id], references: [id])

  client_email String?
  client       Client? @relation(fields: [client_email], references: [email])

  prospect_id String?   @unique
  prospect    Prospect? @relation(fields: [prospect_id], references: [id], onDelete: Cascade)

  specification Specification?
  offer         Offer?
  entry_passes  EntryPass[]
  contract      Contract?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Specification {
  id    String  @id @default(uuid())
  theme String?

  provisions Provision[]
  activities Activity[]

  event_id   String?  @unique
  event      Event?   @relation(fields: [event_id], references: [id], onDelete: Cascade)
  invoice_id String?  @unique
  invoice    Invoice? @relation(fields: [invoice_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Activity {
  id          String @id @default(uuid())
  title       String
  description String

  vendor_name String?

  start_date DateTime
  end_date   DateTime

  amount Float

  specification_id String
  specification    Specification @relation(fields: [specification_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Provision {
  id          String @id @default(uuid())
  provision   String
  description String

  vendor_name String?
  start_date  DateTime
  end_date    DateTime

  amount Float

  specification_id String
  specification    Specification @relation(fields: [specification_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// ======== ENTRY PASS MANAGEMENT ========

model EntryPass {
  id                String        @id @default(uuid())
  name              String
  type              ENTRYPASSTYPE
  stock_type        STOCKTYPE     @default(unlimited)
  reservation_limit Int?
  stock_limit       Int?
  stock_available   Int
  description       String?

  price                            Float?  @default(0)
  transfer_processing_fee_to_guest Boolean @default(false)

  ticket_type TICKETTYPE?

  invite   Invite?
  event_id String?
  event    Event?  @relation(fields: [event_id], references: [id], onDelete: Cascade)

  user_id        String?
  user           User?          @relation(fields: [user_id], references: [id]) // Define the reverse relation
  attendee       Attendee[]
  user_purchases UserPurchase[]
  transactions   Transaction[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Invite {
  id                String   @id @default(uuid())
  sender_email      String
  sender_name       String
  recipients_emails String[]

  subject String
  message String

  entry_pass_id String    @unique
  entry_pass    EntryPass @relation(fields: [entry_pass_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Attendee {
  id                          String       @id @default(uuid())
  name                        String
  contact                     String
  affiliation_or_organization String
  organization_name           String?
  organization_contact        String?
  representative_name         String?
  attendee_type               ATTENDEETYPE

  entry_pass_id String
  entry_pass    EntryPass @relation(fields: [entry_pass_id], references: [id], onDelete: Cascade)

  user_id String? // Add user_id to link to the User model
  user    User?   @relation(fields: [user_id], references: [id]) // Define the reverse relation

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model UserPurchase {
  id       String @id @default(uuid())
  quantity Int

  entry_pass_id String
  entry_pass    EntryPass @relation(fields: [entry_pass_id], references: [id], onDelete: Cascade)

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id, entry_pass_id])
  @@index([entry_pass_id])
}

model Transaction {
  id        String @id @default(uuid())
  reference String @unique
  amount    Float
  status    String

  entry_pass_id String
  entry_pass    EntryPass @relation(fields: [entry_pass_id], references: [id])

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([reference])
  @@index([user_id])
  @@index([entry_pass_id])
}

// ======== OFFERS AND CONTRACTS ========

model Offer {
  id         String     @id @default(uuid())
  date       DateTime   @default(now())
  status     STATUSTYPE @default(pending)
  token      String     @unique @default(uuid())
  offer_link String?    @unique @default(uuid())

  payment_structure PaymentStructure?

  event_id String @unique
  event    Event  @relation(fields: [event_id], references: [id], onDelete: Cascade)

  vendor_id String
  vendor    User   @relation(fields: [vendor_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id])
}

model Contract {
  id     String     @id @default(uuid())
  date   DateTime   @default(now())
  status STATUSTYPE @default(pending)

  token         String? @unique
  contract_link String? @unique

  confidentiality                String @default("This agreement constitutes the entire agreement between the parties are commercial secrets and guarantees to not disclose such information to others without correct authorization.")
  indemnification                String @default("This Client agrees to indemnify and hold the event vendor harmless from any claims, liabilities, damages, or expenses arising out of or related to the scope of service, excluding those caused by the vendor’s negligence or willful misconduct.")
  photography_and_publicity_laws String @default("The client would allow the vendor to take pictures with consent for their brand publicity.")
  entire_agreement               String @default("This agreement constitutes the entire agreement between the parties and supersedes all prior negotiations, understandings, and agreements between the parties.")

  cancellation_policy Cancellation?
  payment_details     PaymentDetails[]
  invoice             Invoice?

  vendor_id String
  vendor    User   @relation(fields: [vendor_id], references: [id])

  client_email String
  client       Client @relation(fields: [client_email], references: [email])

  event_id String @unique
  event    Event  @relation(fields: [event_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Cancellation {
  id String @id @default(uuid())

  refund_policy     REFUNDPOLICY
  notice_days       Int
  percentage_of_fee Float
  specified_by      POLICYSPECIFIER

  contract_id String   @unique
  contract    Contract @relation(fields: [contract_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// ======== PAYMENT MANAGEMENT ========

model PaymentStructure {
  id String @id @default(uuid())

  structure              PAYMENTSTRUCTURE
  initial_deposit        Boolean          @default(false)
  initial_deposit_amount Float?

  offer_id String? @unique
  offer    Offer?  @relation(fields: [offer_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model PaymentSchedule {
  id String @id @default(uuid())

  title_of_deliverable String
  due_date             DateTime
  amount               Float

  // contract_id String?
  // contract    Contract? @relation(fields: [contract_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Invoice {
  id String @id @default(uuid())

  status INVOICESTATUS @default(pending)

  invoice_no String? @unique

  client_email String
  client       Client @relation(fields: [client_email], references: [email])

  specification   Specification?
  payment_details PaymentDetails?

  contract_id String?   @unique
  contract    Contract? @relation(fields: [contract_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  vendor_id String?
  vendor    User?   @relation(fields: [vendor_id], references: [id])

  token        String? @unique @default(uuid())
  invoice_link String? @unique @default(uuid())

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model PaymentDetails {
  id                   String           @id @default(uuid())
  payment_style        PAYMENTSTYLETYPE
  title_of_deliverable String
  amount               Float
  due_date             DateTime

  Contract   Contract? @relation(fields: [contractId], references: [id])
  contractId String?

  invoice    Invoice? @relation(fields: [invoice_id], references: [id])
  invoice_id String?  @unique

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// ======== NOTIFICATIONS ========

model Notification {
  id      String           @id @default(uuid())
  date    DateTime         @default(now())
  message String
  feature String
  type    NotificationType
  read    Boolean

  user_id String
  user    User   @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

// ======== ENUM TYPES ========

/// NotificationType types - info, warning, critical
enum NotificationType {
  info
  warning
  critical
}

/// Payment structure types - local, google, facebook, apple, github, x, linkedin
enum PROVIDER {
  local
  google
  facebook
  apple
  github
  twitter
  linkedin
}

/// Payment structure types - lump_sum, per_specification
enum PAYMENTSTRUCTURE {
  lump_sum
  per_specification
}

/// Payment style types - lump_sum, part_payment
enum PAYMENTSTYLETYPE {
  lump_sum
  part_payment
}

/// Policy specifier types - client, vendor
enum POLICYSPECIFIER {
  client
  vendor
}

/// Refund policy types - refundable, non_refundable
enum REFUNDPOLICY {
  refundable
  non_refundable
}

/// Prospect status types - pending, converted, rejected
enum PROSPECTSTATUSTYPE {
  pending
  converted
  rejected
}

/// Event source types - offline, online
enum EVENTSOURCE {
  offline
  online
}

/// The default status types of models - pending, accepted, rejected
enum STATUSTYPE {
  pending
  accepted
  rejected
}

/// Invoice status types - pending, paid, overdue, accepted
enum INVOICESTATUS {
  pending
  paid
  overdue
  accepted
  rejected
}

/// Ticket types - free, paid
enum TICKETTYPE {
  free
  paid
}

/// Stock types - unlimited, limited
enum STOCKTYPE {
  unlimited
  limited
}

/// Entry pass types - free, paid, invite_only
enum ENTRYPASSTYPE {
  free
  paid
  invite_only
}

/// Schedule types - one_time, recurring
enum SCHEDULETYPE {
  one_time
  recurring
}

/// User types - host, vendor
enum USERTYPE {
  host
  vendor
  internal
}

enum ATTENDEETYPE {
  INDIVIDUAL
  ORGANIZATION
}

enum EXHIBITTYPE {
  event_venues
  event_planner
  bar_services_and_beverages
  photography
  beauty_professional
  fashion_designers_and_stylists
  decorators
  videographer
  clothing_and_accessories
  event_staffs
  caterer
  baker
  printing_service
  event_rental
  favours_and_gifts
  music_and_entertainment
  lighting_and_av
  dancing_instructor
  health_and_fitness
  accomodation
  transportation_service
  model
  social_media_influencer
}

/// Prospect types - host, vendor
enum PROSPECTTYPE {
  host
  vendor
}
