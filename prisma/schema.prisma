// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String       @id @default(uuid())
  email        String       @unique
  firstname    String
  lastname     String
  password     String
  type         USERTYPE?
  city         String?
  state        String?
  booked_dates DateTime[]
  exhibit      EXHIBITTYPE?
  events       Event[]

  prospects Prospect[]
  offers    Offer[]

  notifications Notification[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([email])
}

model Prospect {
  id     String             @id @default(uuid())
  date   DateTime           @default(now())
  source String
  status PROSPECTSTATUSTYPE @default(pending)

  client_email String
  client       Client @relation(fields: [client_email], references: [email])

  event Event?

  exhibitor_id String
  exhibitor    User   @relation(fields: [exhibitor_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id])
}

model Offer {
  id     String     @id @default(uuid())
  date   DateTime   @default(now())
  status STATUSTYPE @default(pending)

  payment_structure PaymentStructure?

  event_id String @unique
  event    Event  @relation(fields: [event_id], references: [id])

  exhibitor_id String
  exhibitor    User   @relation(fields: [exhibitor_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id])
}

model Client {
  id           String  @id @default(uuid())
  email        String  @unique
  type         String
  name         String
  phone_number String
  address      String?

  prospects Prospect[]
  events    Event[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  contracts Contract[]

  @@index([email])
}

model PaymentSchedule {
  id String @id @default(uuid())

  title_of_deliverable String
  due_date             DateTime
  amount               Float

  contract_id String?
  contract    Contract? @relation(fields: [contract_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model PaymentStructure {
  id String @id @default(uuid())

  structure              PAYMENTSTRUCTURE
  initial_deposit        Boolean          @default(false)
  initial_deposit_amount Float?

  offer_id String? @unique
  offer    Offer?  @relation(fields: [offer_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum PAYMENTSTRUCTURE {
  lump_sum
  per_specification
}

model Event {
  id   String    @id @default(uuid())
  name String    @default("undecided")
  date DateTime?
  type String?
  link String?

  number_of_guests Int?

  description String?
  city        String?
  state       String?

  location_type        String
  location             String?
  virtual_meeting_link String?
  location_address     String  @default("undecided")

  // Event Schedule
  schedule_type       SCHEDULETYPE?
  start_date          DateTime?
  start_time          String?
  end_date            DateTime?
  end_time            String?
  recurring_frequency String?

  // Event owner social links
  facebook_link  String?
  instagram_link String?
  x_link         String?
  website_link   String?
  cover_art_url  String?

  exhibitor_id String
  exhibitor    User   @relation(fields: [exhibitor_id], references: [id])

  client_email String?
  client       Client? @relation(fields: [client_email], references: [email])

  prospect_id String?   @unique
  prospect    Prospect? @relation(fields: [prospect_id], references: [id])

  specification Specification?

  offer Offer?

  entry_passes EntryPass[]

  contract Contract?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Specification {
  id    String  @id @default(uuid())
  theme String?

  provisions Provision[]
  activities Activity[]

  event_id String @unique
  event    Event  @relation(fields: [event_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Provision {
  id          String @id @default(uuid())
  provision   String
  description String

  exhibitor_name String?
  start_date     DateTime
  end_date       DateTime

  amount Float

  vendor_name String? // TODO: Isn't it same as exhibitor_name?

  specification_id String
  specification    Specification @relation(fields: [specification_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Activity {
  id          String @id @default(uuid())
  title       String
  description String

  exhibitor_name String?

  start_date DateTime
  end_date   DateTime

  amount Float

  vendor_name String?

  specification_id String
  specification    Specification @relation(fields: [specification_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model EntryPass {
  id                String        @id @default(uuid())
  name              String
  type              ENTRYPASSTYPE
  stock_type        STOCKTYPE     @default(unlimited)
  reservation_limit Int?
  description       String?

  price                            Float?  @default(0)
  transfer_processing_fee_to_guest Boolean @default(false)

  ticket_type TICKETTYPE?

  invite Invite?

  event_id String
  event    Event  @relation(fields: [event_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Invite {
  id                String   @id @default(uuid())
  sender_email      String
  sender_name       String
  recipients_emails String[]

  subject String
  message String

  entry_pass_id String    @unique
  entry_pass    EntryPass @relation(fields: [entry_pass_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Notification {
  id      String   @id @default(uuid())
  date    DateTime @default(now())
  message String
  feature String
  user_id String
  user    User     @relation(fields: [user_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Contract {
  id     String     @id @default(uuid())
  date   DateTime   @default(now())
  status STATUSTYPE @default(pending)

  confidentiality                String @default("This agreement constitutes the entire agreement between the parties are commercial secrets and guarantees to not disclose such information to others without correct authorization.")
  indemnification                String @default("This Client agrees to indemnify and hold the event exhibitor harmless from any claims, liabilities, damages, or expenses arising out of or related to the scope of service, excluding those caused by the exhibitorâ€™s negligence or willful misconduct.")
  photography_and_publicity_laws String @default("The client would allow the exhibitor to take pictures with consent for their brand publicity.")
  entire_agreement               String @default("This agreement constitutes the entire agreement between the parties and supersedes all prior negotiations, understandings, and agreements between the parties.")

  cancellation_policy Cancellation?

  PaymentSchedule PaymentSchedule[]

  client_email String
  client       Client @relation(fields: [client_email], references: [email])

  event_id String @unique
  event    Event  @relation(fields: [event_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Cancellation {
  id String @id @default(uuid())

  refund_policy     REFUNDPOLICY
  notice_days       Int
  percentage_of_fee Float
  specified_by      POLICYSPECIFIER

  contract_id String   @unique
  contract    Contract @relation(fields: [contract_id], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

/// Policy specifier types - client, vendor
enum POLICYSPECIFIER {
  client
  vendor
}

/// Refund policy types - refundable, non_refundable
enum REFUNDPOLICY {
  refundable
  non_refundable
}

/// Prospect status types - pending, converted, rejected
enum PROSPECTSTATUSTYPE {
  pending
  converted
  rejected
}

/// The default status types of models - pending, accepted, rejected
enum STATUSTYPE {
  pending
  accepted
  rejected
}

/// Ticket types - free, paid
enum TICKETTYPE {
  free
  paid
}

/// Stock types - unlimited, limited
enum STOCKTYPE {
  unlimited
  limited
}

/// Entry pass types - free, paid, invite_only
enum ENTRYPASSTYPE {
  free
  paid
  invite_only
}

/// Schedule types - one_time, recurring
enum SCHEDULETYPE {
  one_time
  recurring
}

/// User types - host, exhibitor
enum USERTYPE {
  host
  exhibitor
}

enum EXHIBITTYPE {
  event_venues
  event_planner
  bar_services_and_beverages
  photography
  beauty_professional
  fashion_designers_and_stylists
  decorators
  videographer
  clothing_and_accessories
  event_staffs
  caterer
  baker
  printing_service
  event_rental
  favours_and_gifts
  music_and_entertainment
  lighting_and_av
  dancing_instructor
  health_and_fitness
  accomodation
  transportation_service
  model
  social_media_influencer
}

/// Prospect types - host, exhibitor
enum PROSPECTTYPE {
  host
  exhibitor
}
