// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String          @id @default(uuid())
  email        String       @unique
  firstname    String
  lastname     String
  password     String
  type         USERTYPE?
  city         String?
  state        String?
  booked_dates DateTime[]
  exhibit      EXHIBITTYPE?
  events       Event[]

  prospects Prospect[]
  offers    Offer[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([email])
}

model Prospect {
  id          String       @id @default(uuid())
  date        DateTime @default(now())
  source      String
  status      String @default("Pending")

  client_email String
  client    Client @relation(fields: [client_email], references: [email])

  event     Event?

  exhibitor_id String
  exhibitor    User @relation(fields: [exhibitor_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id])
}

model Offer {
  id String @id @default(uuid())
  date DateTime @default(now())
  status String @default("Pending")

  payment_structure PaymentStructure?

  event_id String @unique
  event    Event @relation(fields: [event_id], references: [id])

  exhibitor_id String
  exhibitor    User @relation(fields: [exhibitor_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([id])
}

model Client {
  id           String     @id @default(uuid())
  email        String     @unique
  type         String
  name         String
  phone_number String

  prospects    Prospect[]
  events      Event[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([email])
}

model PaymentStructure {
  id String @id @default(uuid())

  structure PAYMENTSTRUCTURE
  initial_deposit Boolean @default(false)
  initial_deposit_amount Float?

  offer_id String @unique
  offer    Offer @relation(fields: [offer_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum PAYMENTSTRUCTURE {
  lump_sum
  per_specification
}

model Event {
  id String @id @default(uuid())
  name        String @default("undecided")
  date       DateTime
  type       String
  link      String?

  description String?
  city        String?
  state       String?

  location_type   String
  virtual_meeting_link String?
  location_address String @default("undecided")

  schedule_type SCHEDULETYPE?
  start_date DateTime?
  start_time String?
  end_date DateTime?
  end_time String?
  recurring_frequency String?

  facebook_link String?
  instagram_link String?
  x_link String?
  website_link String?
  cover_art_url String?

  exhibitor_id String
  exhibitor    User @relation(fields: [exhibitor_id], references: [id])

  client_email String
  client    Client @relation(fields: [client_email], references: [email])

  prospect_id String?  @unique
  prospect    Prospect? @relation(fields: [prospect_id], references: [id])

  specification Specification?

  offer    Offer?

  entry_pass EntryPass?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Specification {
  id String @id @default(uuid())
  theme String

  provisions Provision[]
  activities Activity[]

  event_id String @unique
  event    Event @relation(fields: [event_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Provision {
  id String @id @default(uuid())
  provision String
  description String

  exhibitor_name String?
  start_date DateTime
  end_date DateTime

  amount Float

  vendor_name String? // TODO: Isn't it same as exhibitor_name?

  specification_id String
  specification    Specification @relation(fields: [specification_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Activity {
  id String @id @default(uuid())
  title String
  description String

  exhibitor_name String?

  start_date DateTime
  end_date DateTime

  amount Float

  vendor_name String?

  specification_id String
  specification    Specification @relation(fields: [specification_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model EntryPass {
  id String @id @default(uuid())
  type ENTRYPASSTYPE
  stock_type STOCKTYPE @default(unlimited)
  reservation_limit Int?
  description String?

  price Float?

  ticket_type TICKETTYPE?

  invite Invite?

  event_id String @unique
  event    Event @relation(fields: [event_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

}

model Invite {
  id String @id @default(uuid())
  sender_email String
  sender_name String
  recipients_emails String[]

  subject String
  message String
  
  entry_pass_id String @unique
  entry_pass    EntryPass @relation(fields: [entry_pass_id], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

enum TICKETTYPE {
  free
  paid
}

enum STOCKTYPE {
  unlimited
  limited
}

enum ENTRYPASSTYPE {
  free
  paid
  invite_only
}

enum SCHEDULETYPE {
  one_time
  recurring
}

enum USERTYPE {
  host
  exhibitor
}

enum EXHIBITTYPE {
  event_venues
  event_planner
  bar_services_and_beverages
  photography
  beauty_professional
  fashion_designers_and_stylists
  decorators
  videographer
  clothing_and_accessories
  event_staffs
  caterer
  baker
  printing_service
  event_rental
  favours_and_gifts
  music_and_entertainment
  lighting_and_av
  dancing_instructor
  health_and_fitness
  accomodation
  transportation_service
  model
  social_media_influencer
}

enum PROSPECTTYPE {
  host
  exhibitor
}